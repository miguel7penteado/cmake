cmake_minimum_required(VERSION 2.8.9)
project (projeto5)

#set(TIPO_DE_BIBLIOTECA "ESTÁTICA")
set(TIPO_DE_BIBLIOTECA "DINÂMICA")

if(UNIX)
	message("======================================================================")
    message("Sistema operacional ${CMAKE_SYSTEM_NAME}                              ")
    message("======================================================================")
   	message("======================================================================")
   	message("Definindo parâmetros de compilação...")
   	message("======================================================================")
   	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   	message("======================================================================")
   	message("Definindo diretórios de saída do projeto...")
   	message("======================================================================")
	#LIBRARY_OUTPUT_PATH
	#CMAKE_LIBRARY_OUTPUT_DIRECTORY
	#CMAKE_ARCHIVE_OUTPUT_DIRECTORY
	#ARCHIVE_OUTPUT_PATH
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/bin)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/lib/x86_64-linux-gnu/projeto5)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/lib/x86_64-linux-gnu/projeto5)
   	message("======================================================================")
   	message("Definindo os diretórios que contem os arquivos cabeçalhos...")
   	message("======================================================================")
	include_directories(cabecalhos)
   	message("======================================================================")
   	message("Definindo os pacotes fonte que irão gerar uma biblioteca...")
   	message("======================================================================")
	#file(GLOB SOURCES "fonte/*.cpp")
	file(GLOB SOURCES "fonte/Aluno.cpp")
   	message("======================================================================")
   	message("Configurando como será a geração de bibliotecas...")
   	message("======================================================================")
   	if(TIPO_DE_BIBLIOTECA STREQUAL "ESTÁTICA")
		message("######################################################################")
		message("Biblioteca Estática gerada")
		message("######################################################################")
		add_library(aluno STATIC ${SOURCES})
		#set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0 PUBLIC_HEADER "${H_FILES}")
		set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0)
		message("======================================================================")
		message("Avisando o sistema operacional onde está biblioteca associada ")
		message("ao binário")
		message("======================================================================")
		link_directories(construcao)
   	elseif(TIPO_DE_BIBLIOTECA STREQUAL "DINÂMICA")
		message("######################################################################")
		message("Biblioteca Dinâmica gerada")
		message("######################################################################")
		add_library(aluno SHARED ${SOURCES})
		#set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0 PUBLIC_HEADER "${H_FILES}")
		set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0)
		message("======================================================================")
		message("Avisando o sistema operacional onde está biblioteca associada ")
		message("ao binário")
		message("======================================================================")
		link_directories(construcao)	
   	endif()
   	message("======================================================================")
   	message("Gerando o binário executável...")
   	message("======================================================================")
	add_executable(executavel.bin fonte/principal.cpp)
	#add_executable(binario ${SOURCES})
   	message("======================================================================")
   	message("Avisando o linker que existe uma biblioteca associada a esse binário")
   	message("======================================================================")
	set (PROJECT_LINK_LIBS aluno )
	target_link_libraries(executavel.bin ${PROJECT_LINK_LIBS} )
   	message("======================================================================")
   	message("Definindo onde serão instalados os arquivos gerados neste projeto")
   	message("======================================================================")
	install(TARGETS aluno DESTINATION /usr/lib/x86_64-linux-gnu/projeto5)
	#install(TARGETS test DESTINATION lib)
	#install(FILES test.h DESTINATION include)
	
elseif(WIN32)
	message("======================================================================")
    message("Sistema operacional ${CMAKE_SYSTEM_NAME}                              ")
    message("======================================================================")
   	message("======================================================================")
   	message("Definindo parâmetros de compilação...")
   	message("======================================================================")
   	#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   	#target_compile_options(${PROJECT_NAME} PUBLIC "-pie")
	#target_link_libraries(${PROJECT_NAME} "-pie -Wl,-E")
	#set_property(TARGET ${PROJECT_NAME} PROPERTY POSITION_INDEPENDENT_CODE 1)
   	message("======================================================================")
   	message("Definindo diretórios de saída do projeto...")
   	message("======================================================================")
	#LIBRARY_OUTPUT_PATH
	#CMAKE_LIBRARY_OUTPUT_DIRECTORY
	#CMAKE_ARCHIVE_OUTPUT_DIRECTORY
	#ARCHIVE_OUTPUT_PATH
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/bin)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/lib/x86_64-linux-gnu/projeto5)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/usr/lib/x86_64-linux-gnu/projeto5)
   	message("======================================================================")
   	message("Definindo os diretórios que contem os arquivos cabeçalhos...")
   	message("======================================================================")
	include_directories(cabecalhos)
   	message("======================================================================")
   	message("Definindo os pacotes fonte que irão gerar uma biblioteca...")
   	message("======================================================================")
	#file(GLOB SOURCES "fonte/*.cpp")
	file(GLOB SOURCES "fonte/Aluno.cpp")
   	message("======================================================================")
   	message("Configurando como será a geração de bibliotecas...")
   	message("======================================================================")
   	if(TIPO_DE_BIBLIOTECA="ESTÁTICA")
		add_library(aluno STATIC ${SOURCES})
		#set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0 PUBLIC_HEADER "${H_FILES}")
		set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0)
		message("======================================================================")
		message("Avisando o sistema operacional onde está biblioteca associada ")
		message("ao binário")
		message("======================================================================")
		link_directories(construcao)
   	elseif(TIPO_DE_BIBLIOTECA="DINÂMICA")
		add_library(aluno SHARED ${SOURCES})
		#set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0 PUBLIC_HEADER "${H_FILES}")
		set_target_properties(aluno PROPERTIES VERSION 2.2.1 SOVERSION 1.0)
		message("======================================================================")
		message("Avisando o sistema operacional onde está biblioteca associada ")
		message("ao binário")
		message("======================================================================")
		link_directories(construcao)	
   	endif()
   	message("======================================================================")
   	message("Gerando o binário executável...")
   	message("======================================================================")
	add_executable(executavel.bin fonte/principal.cpp)
	#add_executable(binario ${SOURCES})
   	message("======================================================================")
   	message("Avisando o linker que existe uma biblioteca associada a esse binário")
   	message("======================================================================")
	set (PROJECT_LINK_LIBS aluno )
	target_link_libraries(executavel.bin ${PROJECT_LINK_LIBS} )
   	message("======================================================================")
   	message("Definindo onde serão instalados os arquivos gerados neste projeto")
   	message("======================================================================")
	install(TARGETS aluno DESTINATION /usr/lib/x86_64-linux-gnu/projeto5)
	#install(TARGETS test DESTINATION lib)
	#install(FILES test.h DESTINATION include)   	
endif()

